(assume a0 (= a b))
(assume a2 (and p1 true))
(step t0 (cl p1) :rule and :premises (a2))
(assume a3 (or (not p1) (and p2 p3)))
(step t9 (cl (not p1) (and p2 p3)) :rule or :premises (a3))
(step t3 (cl (not (and p2 p3)) p3) :rule and_pos)
(assume a4 (or (not p3) (not (= (f a c) (f b d)))))
(step t10 (cl (not p3) (not (= (f a c) (f b d)))) :rule or :premises (a4))
(step t7 (cl (not (= a b)) (not (= c d)) (= (f a c) (f b d))) :rule eq_congruent)
(assume a1 (= c d))
(step t11.t1 (cl (= (f a c) (f b d)) (not (= a b))) :rule resolution :premises (t7 a1))
(step t11.t2 (cl (not p3) (not (= a b))) :rule resolution :premises (t10 t11.t1))
(step t11.t3 (cl (not (and p2 p3)) (not (= a b))) :rule resolution :premises (t3 t11.t2))
(step t11.t4 (cl (not p1) (not (= a b))) :rule resolution :premises (t9 t11.t3))
(step t11.t5 (cl (not (= a b))) :rule resolution :premises (t0 t11.t4))
(step t11.t6 (cl) :rule resolution :premises (a0 t11.t5))